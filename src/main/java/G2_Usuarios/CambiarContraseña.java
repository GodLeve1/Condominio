
package G2_Usuarios;

import G2_Usuarios.ValidarLogin;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author JoisH
 */
public class CambiarContraseña extends javax.swing.JFrame {
         public JTextField[] textFields;
    public int currentTextFieldIndex = 0;
    public final int MAX_TEXTFIELDS = 6;
    public final Toolkit toolkit = Toolkit.getDefaultToolkit();
    String nombreUsuarioInput = "usuario"; // Obtenerlo desde JTextField
    String ciInput = "2350207219"; // Obtenerlo desde JTextField
    String pinInput = "123456";
    ValidarLogin validar;
    String contraseña;
   
     //Validar
    
    
    public CambiarContraseña() {
        initComponents();
        setLocationRelativeTo(null);
       
        this.validar = new ValidarLogin(nombreUsuarioInput, ciInput, pinInput, contraseña);
        this.contraseña = contraseña;
        setResizable(false);//no miximizar
      
        
        //para que el boton de cerrar no lo cierre al sistema
        setDefaultCloseOperation(CambiarContraseña.DO_NOTHING_ON_CLOSE); // evita que el botón "Exit" cierre el programa

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                setVisible(false); // hace invisible el JFrame actual
            }
        });

        setVisible(true); // hace visible el JFrame
        
       
        
         //mensajes 
        jLNC2.setVisible(false);
        jLNC9.setVisible(false);
        jLNC5.setVisible(false);
        jLNC7.setVisible(false);
        
     
        
        /////////////////
         //////////////////////
                   jTFCIUsuario.addKeyListener(new KeyAdapter() {
    public void keyTyped(KeyEvent e) {
        char c = e.getKeyChar();
        if (!Character.isDigit(c)) {
            Toolkit.getDefaultToolkit().beep(); // Emite un sonido de alerta
            e.consume();
        }
    }
});
        
        
        
          
                   // Agrega un evento de escucha de texto al JTextField jTFCIUsuario
jTFCIUsuario.getDocument().addDocumentListener(new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent e) {
        validarCedula();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        validarCedula();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        validarCedula();
    }
});
            
        
        
        
        
        
        

        
    }

    public void setContraseña(String contraseña) {
        this.contraseña = contraseña;
    }

    public String getContraseña() {
        return contraseña;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLBIniciarSesion1 = new javax.swing.JLabel();
        jLNC4 = new javax.swing.JLabel();
        jLNC6 = new javax.swing.JLabel();
        jLNC8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jTFContraseñaUsuario = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        jLBResetearContraseña = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTFContraseñaUsuario1 = new javax.swing.JPasswordField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLNC5 = new javax.swing.JLabel();
        jLNC7 = new javax.swing.JLabel();
        jLNC9 = new javax.swing.JLabel();
        jLNC2 = new javax.swing.JLabel();
        jTFCIUsuario = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jcontraseña = new javax.swing.JPasswordField();

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Usuario");
        jLabel2.setAutoscrolls(true);
        jLabel2.setDoubleBuffered(true);
        jLabel2.setFocusCycleRoot(true);
        jLabel2.setFocusTraversalPolicyProvider(true);

        jLBIniciarSesion1.setBackground(new java.awt.Color(255, 255, 255));
        jLBIniciarSesion1.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        jLBIniciarSesion1.setForeground(new java.awt.Color(255, 255, 255));
        jLBIniciarSesion1.setText("                     Iniciar sesión");
        jLBIniciarSesion1.setAutoscrolls(true);
        jLBIniciarSesion1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLBIniciarSesion1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLBIniciarSesion1.setDoubleBuffered(true);
        jLBIniciarSesion1.setFocusCycleRoot(true);
        jLBIniciarSesion1.setFocusTraversalPolicyProvider(true);
        jLBIniciarSesion1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLBIniciarSesion1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLBIniciarSesion1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLBIniciarSesion1MouseExited(evt);
            }
        });

        jLNC4.setForeground(new java.awt.Color(255, 102, 0));
        jLNC4.setText("*Por favor, ingresa una contraseña (12+carácteres especiales)");

        jLNC6.setForeground(new java.awt.Color(255, 102, 0));
        jLNC6.setText("*Por favor, ingresa nuevamente la contraseña");

        jLNC8.setForeground(new java.awt.Color(255, 102, 0));
        jLNC8.setText("*Por favor, ingresa un PIN de seguridad");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Cambia tu contraseña");
        jLabel1.setAutoscrolls(true);
        jLabel1.setDoubleBuffered(true);
        jLabel1.setFocusCycleRoot(true);
        jLabel1.setFocusTraversalPolicyProvider(true);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Cédula de identidad");
        jLabel3.setAutoscrolls(true);
        jLabel3.setDoubleBuffered(true);
        jLabel3.setFocusCycleRoot(true);
        jLabel3.setFocusTraversalPolicyProvider(true);

        jSeparator1.setAutoscrolls(true);
        jSeparator1.setDoubleBuffered(true);
        jSeparator1.setFocusCycleRoot(true);
        jSeparator1.setFocusTraversalPolicyProvider(true);
        jSeparator1.setFocusable(true);
        jSeparator1.setInheritsPopupMenu(true);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Nueva contraseña");
        jLabel4.setAutoscrolls(true);
        jLabel4.setDoubleBuffered(true);
        jLabel4.setFocusCycleRoot(true);
        jLabel4.setFocusTraversalPolicyProvider(true);

        jTFContraseñaUsuario.setBorder(null);
        jTFContraseñaUsuario.setCaretColor(new java.awt.Color(255, 255, 255));
        jTFContraseñaUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTFContraseñaUsuarioMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTFContraseñaUsuarioMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTFContraseñaUsuarioMouseExited(evt);
            }
        });
        jTFContraseñaUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFContraseñaUsuarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFContraseñaUsuarioKeyTyped(evt);
            }
        });

        jLBResetearContraseña.setBackground(new java.awt.Color(255, 255, 255));
        jLBResetearContraseña.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        jLBResetearContraseña.setText("                cambiar contraseña ");
        jLBResetearContraseña.setAutoscrolls(true);
        jLBResetearContraseña.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLBResetearContraseña.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLBResetearContraseña.setDoubleBuffered(true);
        jLBResetearContraseña.setFocusCycleRoot(true);
        jLBResetearContraseña.setFocusTraversalPolicyProvider(true);
        jLBResetearContraseña.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLBResetearContraseñaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLBResetearContraseñaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLBResetearContraseñaMouseExited(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Confirmar nueva contraseña");
        jLabel5.setAutoscrolls(true);
        jLabel5.setDoubleBuffered(true);
        jLabel5.setFocusCycleRoot(true);
        jLabel5.setFocusTraversalPolicyProvider(true);

        jTFContraseñaUsuario1.setBorder(null);
        jTFContraseñaUsuario1.setCaretColor(new java.awt.Color(255, 255, 255));
        jTFContraseñaUsuario1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTFContraseñaUsuario1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTFContraseñaUsuario1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTFContraseñaUsuario1MouseExited(evt);
            }
        });
        jTFContraseñaUsuario1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFContraseñaUsuario1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFContraseñaUsuario1KeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Contraseña");
        jLabel6.setAutoscrolls(true);
        jLabel6.setDoubleBuffered(true);
        jLabel6.setFocusCycleRoot(true);
        jLabel6.setFocusTraversalPolicyProvider(true);

        jLNC5.setForeground(new java.awt.Color(255, 102, 0));
        jLNC5.setText("*Por favor, ingresa una nueva contraseña");

        jLNC7.setForeground(new java.awt.Color(255, 102, 0));
        jLNC7.setText("*Por favor, ingresa nuevamente la contraseña");

        jLNC9.setForeground(new java.awt.Color(255, 102, 0));
        jLNC9.setText("*Por favor, ingresa la contraseña actual");

        jLNC2.setForeground(new java.awt.Color(255, 102, 0));
        jLNC2.setText("*Por favor, ingresa tu cédula de identidad");

        jTFCIUsuario.setBorder(null);
        jTFCIUsuario.setCaretColor(new java.awt.Color(255, 255, 255));
        jTFCIUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTFCIUsuarioMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTFCIUsuarioMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTFCIUsuarioMouseExited(evt);
            }
        });
        jTFCIUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCIUsuarioActionPerformed(evt);
            }
        });
        jTFCIUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTFCIUsuarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFCIUsuarioKeyTyped(evt);
            }
        });

        jcontraseña.setBorder(null);
        jcontraseña.setCaretColor(new java.awt.Color(255, 255, 255));
        jcontraseña.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcontraseñaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jcontraseñaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcontraseñaMouseExited(evt);
            }
        });
        jcontraseña.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jcontraseñaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jcontraseñaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFCIUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLNC7, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTFContraseñaUsuario1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                            .addComponent(jTFContraseñaUsuario)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                                .addComponent(jcontraseña, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(jLBResetearContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLNC2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 46, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(44, 44, 44)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLNC9)
                            .addComponent(jLNC5))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNC2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTFCIUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNC9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcontraseña)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNC5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFContraseñaUsuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNC7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFContraseñaUsuario1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLBResetearContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLBIniciarSesion1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLBIniciarSesion1MouseClicked
     /*   //Modulos
        Modulos frame = new Modulos();
        frame.setVisible(true);

        //Login
        setVisible(false);*/
    }//GEN-LAST:event_jLBIniciarSesion1MouseClicked

    private void jLBIniciarSesion1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLBIniciarSesion1MouseEntered
   
        // Configura la propiedad de opacidad del color de fondo
        jLBIniciarSesion1.setOpaque(true);

        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_jLBIniciarSesion1MouseEntered

    private void jLBIniciarSesion1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLBIniciarSesion1MouseExited
       
        // Configura la propiedad de opacidad del color de fondo
        jLBIniciarSesion1.setOpaque(true);

        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_jLBIniciarSesion1MouseExited

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      
    }//GEN-LAST:event_formWindowClosing

    private void jTFCIUsuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCIUsuarioKeyTyped
if (jLNC2.getText().equals("*Cédula de Identidad Inválida")) {
                    // Ocultar el JLabel
                    jLNC2.setVisible(true);}else 
        if (jLNC2.getText().equals("*Por favor, ingresa tu cédula de identidad")) {
                    // Ocultar el JLabel
                    jLNC2.setVisible(false);}



        if (jLNC2.getText().equals("*Por favor, ingresa tu cédula de identidad")) {
            // Ocultar el JLabel
            jLNC2.setVisible(false);}

        if (jLNC2.getText().equals("*Cédula de Identidad Inválida")) {
            // Ocultar el JLabel
            jLNC2.setVisible(false);}

        jTFCIUsuario.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    Toolkit.getDefaultToolkit().beep(); // Emite un sonido de alerta
                    e.consume();
                }
            }
        });
    }//GEN-LAST:event_jTFCIUsuarioKeyTyped

    private void jTFCIUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCIUsuarioKeyPressed
   
        if (jLNC2.getText().equals("*Cédula de Identidad Inválida")) {
                    // Ocultar el JLabel
                    jLNC2.setVisible(true);}else 
        if (jLNC2.getText().equals("*Por favor, ingresa tu cédula de identidad")) {
                    // Ocultar el JLabel
                    jLNC2.setVisible(false);}
        
        
        
        
        jTFCIUsuario.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                String cedula = jTFCIUsuario.getText();

                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (!cedula.equals("")) {
                        if (!validar.validateCedula(cedula)) {
                            jTFCIUsuario.setText("");
                            jLNC2.setVisible(true);
                            jLNC2.setText("*Cédula de Identidad Inválida");
                            jLNC2.setForeground(Color.RED);
                        } else {
                            jLNC2.setText("*Cédula de Identidad Válida");
                            jLNC2.setForeground(Color.GREEN);
                        }
                    } else {
                        jLNC2.setVisible(false);
                    }
                }
            }
        });
    }//GEN-LAST:event_jTFCIUsuarioKeyPressed

    private void jTFCIUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCIUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCIUsuarioActionPerformed

    private void jTFCIUsuarioMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFCIUsuarioMouseExited
        jLNC2.setVisible(false);
    }//GEN-LAST:event_jTFCIUsuarioMouseExited

    private void jTFCIUsuarioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFCIUsuarioMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCIUsuarioMouseEntered

    private void jTFCIUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFCIUsuarioMouseClicked
        jLNC2.setVisible(true);
        if(jTFCIUsuario.equals("")){
            jLNC2.setText("**Por favor, ingresa tu cédula de identidad");
            jLNC2.setForeground(java.awt.Color.ORANGE);//color de letras
        }
    }//GEN-LAST:event_jTFCIUsuarioMouseClicked

    private void jTFContraseñaUsuario1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuario1KeyTyped
     
            // Ocultar el JLabel
            jLNC7.setVisible(false);
    }//GEN-LAST:event_jTFContraseñaUsuario1KeyTyped

    private void jTFContraseñaUsuario1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuario1KeyPressed
        validar.PasswordStrengthVerifier(jTFContraseñaUsuario1, jLNC4);
        jTFContraseñaUsuario1.addKeyListener(new KeyAdapter() {

            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isLetter(c) && c != '.'&& !Character.isDigit(c) && c != '-' && c != '*' && c != '/' && c != '_'  && c != 'ñ' && c != 'Ñ' ) {
                    Toolkit.getDefaultToolkit().beep(); // Emite un sonido de alerta
                    e.consume();
                }
            }

            public void keyPressed(KeyEvent e) {
                if (e.getKeyChar() == KeyEvent.VK_SPACE) {
                    Toolkit.getDefaultToolkit().beep(); // Emite un sonido de alerta
                    e.consume();
                }
            }
        });
    }//GEN-LAST:event_jTFContraseñaUsuario1KeyPressed

    private void jTFContraseñaUsuario1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuario1MouseExited
        jLNC7.setVisible(false);
    }//GEN-LAST:event_jTFContraseñaUsuario1MouseExited

    private void jTFContraseñaUsuario1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuario1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFContraseñaUsuario1MouseEntered

    private void jTFContraseñaUsuario1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuario1MouseClicked
        jLNC7.setVisible(true);
        String cedula= jTFCIUsuario.getText();
        validar.validateCedula(cedula);
        if(!cedula.equals("")){
            if(!validar.validateCedula(cedula)){
                jTFCIUsuario.setText("");
                jLNC2.setVisible(true);
                jLNC2.setText("*Cédula de Identidad Inválida");
                jLNC2.setForeground(java.awt.Color.red);//color de letras
            }if(validar.validateCedula(cedula)){

                jLNC2.setText("*Cédula de Identidad Válida");
                jLNC2.setForeground(java.awt.Color.green);//color de letras
            }
        }if(validar.validateCedula(cedula)){
            jLNC2.setVisible(false);
            jLNC2.setText("**Por favor, ingresa tu cédula de identidad");
            jLNC2.setForeground(java.awt.Color.ORANGE);//color de letras
        }
    }//GEN-LAST:event_jTFContraseñaUsuario1MouseClicked

    private void jLBResetearContraseñaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLBResetearContraseñaMouseExited
     
        // Configura la propiedad de opacidad del color de fondo
        jLBResetearContraseña.setOpaque(true);

        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_jLBResetearContraseñaMouseExited

    private void jLBResetearContraseñaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLBResetearContraseñaMouseEntered
    
        // Configura la propiedad de opacidad del color de fondo
        jLBResetearContraseña.setOpaque(true);

        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_jLBResetearContraseñaMouseEntered

    private void jLBResetearContraseñaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLBResetearContraseñaMouseClicked


String cedula = jTFCIUsuario.getText();
String contraseñaActual = jcontraseña.getText(); // Debes definir cómo obtienes el PIN
String nuevaContraseña = jTFContraseñaUsuario.getText();
String verificacionNuevaContraseña = jTFContraseñaUsuario1.getText();

if ( cedula.isEmpty() || contraseñaActual.isEmpty() || nuevaContraseña.isEmpty() || verificacionNuevaContraseña.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos");
} else if (!nuevaContraseña.equals(verificacionNuevaContraseña)) {
    JOptionPane.showMessageDialog(null, "Las contraseñas no coinciden, ingrese nuevamente");
    // Borra los campos de contraseña
    jTFContraseñaUsuario.setText("");
    jTFContraseñaUsuario1.setText("");
} else {
    // Continúa con el proceso de cambio de contraseña

    // Establece la conexión a la base de datos
    Connection connection = null;

    try {
        connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/sgcpvcplevnajuv", "root", "");

        // Verifica si el usuario y la cédula existen y la contraseña actual es correcta
        String selectQuery = "SELECT * FROM login WHERE  `Cédula de identidad` = ? AND Contraseña = ? ";
        PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
        preparedStatement.setString(1, cedula);
        preparedStatement.setString(2, contraseñaActual);

        ResultSet resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            // Las credenciales son correctas, actualiza la contraseña en la base de datos
            String updateQuery = "UPDATE login SET Contraseña = ? WHERE `Cédula de identidad` = ?";
            preparedStatement = connection.prepareStatement(updateQuery);
            preparedStatement.setString(1, nuevaContraseña);
            preparedStatement.setString(2, cedula);

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                
                int opcion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de cambiar la contraseña?", "Confirmación", JOptionPane.YES_NO_OPTION);

                if (opcion == JOptionPane.YES_OPTION) {
     JOptionPane.showMessageDialog(null, "Contraseña cambiada exitosamente");
                setVisible(false);
        } else {
    // El usuario ha seleccionado "No" o ha cerrado el cuadro de diálogo
    // Aquí puedes manejar la situación en la que el usuario no desea cambiar la contraseña
            }
                
                
                
               
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo cambiar la contraseña");
            }
        } else {
            // Borra los campos de contraseña
            jTFContraseñaUsuario.setText("");
            jTFContraseñaUsuario1.setText("");
            JOptionPane.showMessageDialog(null, "Las credenciales actuales no son correctas");
            
        }
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            if (connection != null) {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

    }//GEN-LAST:event_jLBResetearContraseñaMouseClicked

    private void jTFContraseñaUsuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuarioKeyTyped
        if (jLNC5.getText().equals("*Por favor, ingresa una nueva contraseña")) {
            // Ocultar el JLabel
            jLNC5.setVisible(false);}        // TODO add your handling code here:
    }//GEN-LAST:event_jTFContraseñaUsuarioKeyTyped

    private void jTFContraseñaUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuarioKeyPressed
        //parra regresar a la normalidad
        if(jTFContraseñaUsuario.equals("")){
            jLNC5.setText("*Por favor, ingresa una contraseña (12+carácteres especiales)");
            jLNC5.setForeground(java.awt.Color.orange);//color de letras
        }

        validar.PasswordStrengthVerifier(jTFContraseñaUsuario, jLNC5);
        jTFContraseñaUsuario.addKeyListener(new KeyAdapter() {

            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isLetter(c) && !Character.isDigit(c)&& c != '.' && c != '-' && c != '*' && c != '/' && c != '_'  && c != 'ñ' && c != 'Ñ' ) {
                    Toolkit.getDefaultToolkit().beep(); // Emite un sonido de alerta
                    e.consume();
                    //parra regresar a la normalidad
                    if(jTFContraseñaUsuario.equals("")){
                        jLNC5.setText("*Por favor, ingresa una contraseña (12+carácteres especiales)");
                        jLNC5.setForeground(java.awt.Color.orange);//color de letras
                    }
                }
            }

            public void keyPressed(KeyEvent e) {
                if (e.getKeyChar() == KeyEvent.VK_SPACE) {
                    Toolkit.getDefaultToolkit().beep(); // Emite un sonido de alerta
                    e.consume();
                }
            }
        });
    }//GEN-LAST:event_jTFContraseñaUsuarioKeyPressed

    private void jTFContraseñaUsuarioMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuarioMouseExited
        setCursor(Cursor.getDefaultCursor());
        jLNC5.setVisible(false);
    }//GEN-LAST:event_jTFContraseñaUsuarioMouseExited

    private void jTFContraseñaUsuarioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuarioMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
    }//GEN-LAST:event_jTFContraseñaUsuarioMouseEntered

    private void jTFContraseñaUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFContraseñaUsuarioMouseClicked

        jLNC5.setVisible(true);

        String cedula= jTFCIUsuario.getText();
        validar.validateCedula(cedula);
        if(!cedula.equals("")){
            if(!validar.validateCedula(cedula)){
                jTFCIUsuario.setText("");
                jLNC2.setVisible(true);
                jLNC2.setText("*Cédula de Identidad Inválida");
                jLNC2.setForeground(java.awt.Color.red);//color de letras
            }if(validar.validateCedula(cedula)){

                jLNC2.setText("*Cédula de Identidad Válida");
                jLNC2.setForeground(java.awt.Color.green);//color de letras
            }
        }if(validar.validateCedula(cedula)){
            jLNC2.setVisible(false);
            jLNC2.setText("**Por favor, ingresa tu cédula de identidad");
            jLNC2.setForeground(java.awt.Color.ORANGE);//color de letras
        }
    }//GEN-LAST:event_jTFContraseñaUsuarioMouseClicked

    private void jcontraseñaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcontraseñaMouseClicked
         jLNC9.setVisible(true);
     String cedula= jTFCIUsuario.getText();
        validar.validateCedula(cedula);
        if(!cedula.equals("")){
            if(!validar.validateCedula(cedula)){
                jTFCIUsuario.setText("");
                jLNC2.setVisible(true);
                jLNC2.setText("*Cédula de Identidad Inválida");
                jLNC2.setForeground(java.awt.Color.red);//color de letras
            }if(validar.validateCedula(cedula)){

                jLNC2.setText("*Cédula de Identidad Válida");
                jLNC2.setForeground(java.awt.Color.green);//color de letras
            }
        }if(validar.validateCedula(cedula)){
            jLNC2.setVisible(false);
            jLNC2.setText("**Por favor, ingresa tu cédula de identidad");
            jLNC2.setForeground(java.awt.Color.ORANGE);//color de letras
        }
    }//GEN-LAST:event_jcontraseñaMouseClicked

    private void jcontraseñaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcontraseñaMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jcontraseñaMouseEntered

    private void jcontraseñaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcontraseñaMouseExited
       setCursor(Cursor.getDefaultCursor());
        jLNC9.setVisible(false);
    }//GEN-LAST:event_jcontraseñaMouseExited

    private void jcontraseñaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcontraseñaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcontraseñaKeyPressed

    private void jcontraseñaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jcontraseñaKeyTyped
 if (jLNC9.getText().equals("*Por favor, ingresa la contraseña actual")) {
            // Ocultar el JLabel
            jLNC9.setVisible(false);}        // TODO add your handling code here:
    }//GEN-LAST:event_jcontraseñaKeyTyped


   ///aqui valida lo de que haya solo un caracter ingresado en cada textfield e ingrese el siguiente valor en el proximo jtextfield
  private void setupTextField(JTextField textField) {
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    e.consume();
                } else {
                    textField.setText(String.valueOf(c));
                    moveToNextTextField(textField);
                    e.consume();
                }
            }
        });
    }

    private void moveToNextTextField(JTextField currentTextField) {
        int currentIndex = -1;
        for (int i = 0; i < MAX_TEXTFIELDS; i++) {
            if (textFields[i] == currentTextField) {
                currentIndex = i;
                break;
            }
        }

        if (currentIndex == MAX_TEXTFIELDS - 1) {
            textFields[0].requestFocus();
        } else if (currentIndex + 1 < MAX_TEXTFIELDS) {
            textFields[currentIndex + 1].requestFocus();
        }
    }

 
   
    
    //Aqui recopila todo el contenido de todos los jtextfield para el ping de seguridad 
    public String gatherTextFieldsContent() {
        StringBuilder content = new StringBuilder();

        for (JTextField textField : textFields) {
            content.append(textField.getText());
        }

        return content.toString();
    }
    




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CambiarContraseña().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLBIniciarSesion1;
    private javax.swing.JLabel jLBResetearContraseña;
    private javax.swing.JLabel jLNC2;
    private javax.swing.JLabel jLNC4;
    private javax.swing.JLabel jLNC5;
    private javax.swing.JLabel jLNC6;
    private javax.swing.JLabel jLNC7;
    private javax.swing.JLabel jLNC8;
    private javax.swing.JLabel jLNC9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField jTFCIUsuario;
    private javax.swing.JPasswordField jTFContraseñaUsuario;
    private javax.swing.JPasswordField jTFContraseñaUsuario1;
    private javax.swing.JPasswordField jcontraseña;
    // End of variables declaration//GEN-END:variables

// Método para validar la cédula de identidad
private void validarCedula() {
    String cedula = jTFCIUsuario.getText();

    if (!cedula.isEmpty()) {
        if (!validar.validateCedula(cedula)) {
            jLNC2.setVisible(true);
            jLNC2.setText("*Cédula de Identidad Inválida");
            jLNC2.setForeground(java.awt.Color.red);
        } else {
            jLNC2.setVisible(true);
            jLNC2.setText("*Cédula de Identidad Válida");
            jLNC2.setForeground(java.awt.Color.green);
        }
    } else {
        jLNC2.setVisible(false);
    }
}



}
